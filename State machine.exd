from builtins import str
import hbp_nrp_excontrol.nrp_states as states
from hbp_nrp_excontrol.nrp_states import WaitToClockState, ClockDelayState, LinkPoseMonitorState
import smach_ros
import smach
from smach import CBState
from smach import StateMachine
from smach.state import State
from smach_ros import ServiceState
from gazebo_msgs.srv import ApplyBodyWrench, ApplyBodyWrenchRequest, GetModelState, SpawnEntity, SpawnEntityRequest, SetModelState, DeleteModel, DeleteModelRequest, GetModelStateRequest
from gazebo_msgs.msg import ModelState
from geometry_msgs.msg import Wrench, Vector3, Point
import rospy
from rospy import ServiceProxy, wait_for_service
from std_msgs.msg import String
from hbp_nrp_excontrol.logs import clientLogger

arm_state = rospy.Publisher('/arm_robot_0/commands', String, latch=True, queue_size=10)

ball_name = "ball"
ball_sdf_xml = """
<?xml version='1.0'?>
<sdf version='1.5'>
  <model name='{ball_name}'>
    <pose>0 0 0 0 0 0</pose>
    <link name='ball_link'>
      <inertial>
        <mass>0.03</mass>
      </inertial>
      <collision name='collision'>
        <geometry>
          <sphere>
            <radius>.03</radius>
          </sphere>
        </geometry>
      </collision>
      <visual name='visual'>
        <geometry>
          <sphere>
            <radius>.03</radius>
          </sphere>
        </geometry>
        <material>
          <script>
            <uri>file://media/materials/scripts/gazebo.material</uri>
            <name>Gazebo/Green</name>
          </script>
        </material>
      </visual>
    </link>
  </model>
</sdf>
"""

target_name = "target"
target_sdf_xml = """
<?xml version='1.0'?>
<sdf version='1.5'>
  <model name='{target_name}'>
    <pose>0 0 0 1.57 0 0</pose>
    <static>1</static>
    <link name='target_link'>
      <inertial>
        <mass>0.03</mass>
      </inertial>
      <collision name='target_collision'>
        <geometry>
          <cylinder>
            <radius> 0.15 </radius>
            <length> 0.001 </length>
          </cylinder>
        </geometry>
      </collision>
      <visual name='target_visual'>
        <geometry>
          <cylinder>
            <radius> 0.15 </radius>
            <length> 0.001 </length>
          </cylinder>
        </geometry>
        <material>
          <script>
            <uri>file://media/materials/scripts/gazebo.material</uri>
            <name>Gazebo/RedGlow</name>
          </script>
        </material>
      </visual>
    </link>
  </model>
</sdf>
"""

epsilon = (0.05, 0.5, 10)
x_r = -0.4
x_l = +0.4
y = 0
z = 0

x_ball = 0.
y_ball = -0.25
z_ball = 1.1
x_or_ball = 0.

x_target = 0.5
y_target = -4.
z_target = 1.4
x_or_target = 1.57

my_data = None
flag = 'NO'

def send_arm_command(command):
    @smach.cb_interface(input_keys=[], output_keys=[], outcomes=['finished', 'preempted'])
    def fun(user_data):
        arm_state.publish(command)
        return 'finished'
    return fun

def reset_cb():
    return send_arm_command('RESET')

def down_cb():
    return send_arm_command('DOWN')

def close_hand_cb():
    return send_arm_command('CLOSE_HAND')

def go():
    return send_arm_command('PUSH')

def draw_cb(name,x_d,y_d,z_d,x_or):
    @smach.cb_interface(input_keys=[], output_keys=[], outcomes=['finished', 'preempted'])
    def fun(userdata):
        rospy.wait_for_service('/gazebo/spawn_sdf_entity')
        spawn_model_srv=rospy.ServiceProxy("/gazebo/spawn_sdf_entity",SpawnEntity,persistent=False)
        draw_msg = SpawnEntityRequest()
        draw_msg.entity_name = name
        if name == "ball":
            draw_msg.entity_xml = ball_sdf_xml
        elif name == "target":
            draw_msg.entity_xml = target_sdf_xml
        draw_msg.initial_pose.orientation.x = x_or    
        draw_msg.initial_pose.position.x = x_d
        draw_msg.initial_pose.position.y = y_d
        draw_msg.initial_pose.position.z = z_d
        draw_msg.reference_frame = "world"
        spawn_model_srv(draw_msg)     
        return 'finished'
    return fun

def delete_cb(name):
    @smach.cb_interface(input_keys=[], output_keys=[], outcomes=['finished', 'preempted'])
    def fun(userdata):
        rospy.wait_for_service('/gazebo/delete_model')
        delete_model_srv = rospy.ServiceProxy("/gazebo/delete_model", DeleteModel,persistent=False)
        delete_msg = DeleteModelRequest()
        delete_msg.model_name = name
        delete_model_srv(delete_msg)
        return 'finished'
    return fun

def callback(data):
    global my_data
    my_data = data.data
rospy.Subscriber('/arm_robot_0/decision', String, callback)

def check_global_variable(flag):
    @smach.cb_interface(input_keys=[], output_keys=[],outcomes = ['go_on','right','preempted'])
    def fun(userdata):
        if my_data is not None:
            flag = my_data
        #clientLogger.info(flag)
        if flag == 'YES':
            return 'right'
        return 'go_on'
    return fun

@smach.cb_interface(input_keys=[], output_keys=[], outcomes=['finished', 'preempted'])
def get_position_cb(userdata):
    global position_x
    global position_y
    global position_z
    rospy.wait_for_service('/gazebo/get_model_state')
    position_model_srv = rospy.ServiceProxy("/gazebo/get_model_state", GetModelState)
    ball_msg = GetModelStateRequest()
    ball_msg.model_name = "ball"
    coordinates = position_model_srv(ball_msg) 
    position_x = coordinates.pose.position.x
    position_y = coordinates.pose.position.y
    position_z = coordinates.pose.position.z
    return 'finished'
    
def check_position_cb(x,y,z,epsilon):
    @smach.cb_interface(input_keys=[], output_keys=[], outcomes=['reached','notreached', 'preempted'])
    def fun(userdata):
        eps_x = epsilon[0]
        eps_y = epsilon[1]
        eps_z = epsilon[2]
        if ((x - eps_x < position_x < x + eps_x) and (y - eps_y < position_y < y + eps_y) and (z - eps_z < position_z < z + eps_z)):
            return 'reached'
        else:
            return 'notreached'
    return fun

@smach.cb_interface(input_keys=[], output_keys=[], outcomes=['finished', 'preempted'])
def apply_force_r_cb(userdata):
    rospy.wait_for_service('/gazebo/apply_body_wrench')
    wrench_srv = rospy.ServiceProxy('/gazebo/apply_body_wrench',ApplyBodyWrench,persistent=True)
    force = Vector3(2, 0., 0)
    wrench =  Wrench(force, Vector3(0,0,0))
    wrench_srv("ball_link", "world", Point(), wrench, rospy.Time(0.), rospy.Duration(0.1))
    return 'finished'

@smach.cb_interface(input_keys=[], output_keys=[], outcomes=['finished', 'preempted'])
def apply_force_l_cb(userdata):
    rospy.wait_for_service('/gazebo/apply_body_wrench')
    wrench_srv = rospy.ServiceProxy('/gazebo/apply_body_wrench',ApplyBodyWrench,persistent=True)
    force = Vector3(2,0,0)
    wrench =  Wrench(force, Vector3(0,0,0))
    wrench_srv("ball_link", "world", Point(), wrench, rospy.Time(0.), rospy.Duration(0.1))
    return 'finished'
   
   

# FINAL STATES
FINISHED = 'FINISHED'
ERROR = 'ERROR'
PREEMPTED = 'PREEMPTED'

sm = StateMachine(outcomes=[FINISHED, ERROR, PREEMPTED])

with sm:
    StateMachine.add(
       'initial_wait_condition',
       WaitToClockState(1.),
       transitions={'valid': 'initial_wait_condition',
                     'invalid': 'reset_arm',
                     'preempted': PREEMPTED}
    )
    
    StateMachine.add(
      'reset_arm',
      CBState(reset_cb()),
      transitions={'finished': 'wait_reset',
                     'preempted': PREEMPTED}
    )
    StateMachine.add(
        'wait_reset',
        ClockDelayState(4.),
        transitions={'valid': 'wait_reset',
                     'invalid': 'reset_ball',
                     'preempted': PREEMPTED}
    )

    StateMachine.add('reset_ball', 
                     CBState(draw_cb("ball",x_ball,y_ball,z_ball,x_or_ball)), 
                     transitions={'finished': 'wait_ball',
                                 'preempted': PREEMPTED}
    )
    
    StateMachine.add(
        'wait_ball',
        ClockDelayState(0.2),
        transitions={'valid': 'wait_ball',
                     'invalid': 'reset_target',
                     'preempted': PREEMPTED}
    )
    
    StateMachine.add('reset_target', 
                     CBState(draw_cb("target",x_target,y_target,z_target,x_or_target)), 
                     transitions={'finished': 'check_decision',
                                 'preempted': PREEMPTED}
    )
   
    StateMachine.add(
        'check_decision',
        CBState(check_global_variable(flag)),
        transitions={'go_on': 'check_decision',
                     'right': 'down',
                     'preempted': PREEMPTED}
    )
    
    StateMachine.add(
      'down',
      CBState(down_cb()),
      transitions={'finished': 'wait_down',
                     'preempted': PREEMPTED}
    )
    
    StateMachine.add(
        'wait_down',
        ClockDelayState(1.8),
        transitions={'valid': 'wait_down',
                     'invalid': 'close_hand',
                     'preempted': PREEMPTED}
    )
    
    StateMachine.add(
      'close_hand',
      CBState(close_hand_cb()),
      transitions={'finished': 'wait_close_hand',
                     'preempted': PREEMPTED}
    )
    
    StateMachine.add(
        'wait_close_hand',
        ClockDelayState(0.2),
        transitions={'valid': 'wait_close_hand',
                     'invalid': 'go',
                     'preempted': PREEMPTED}
    )
    
    StateMachine.add(
      'go',
      CBState(go_cb()),
      transitions={'finished': 'get_position',
                     'preempted': PREEMPTED}
    )
    
    StateMachine.add(
      'get_position',
      CBState(get_position_cb),
      transitions={'finished': 'check_arrived',
                     'preempted': PREEMPTED}
    )
    
    StateMachine.add(
      'check_arrived',
      CBState(check_position_cb(x_l,y,z,epsilon)),
      transitions={'reached': 'apply_wrench',
                   'notreached': 'get_position',
                     'preempted': PREEMPTED}
    )

    StateMachine.add(
      'apply_wrench',
      CBState(apply_force_r_cb),
      transitions={'finished': 'wait_finish',
                     'preempted': PREEMPTED}
    )
       
        
    StateMachine.add(
        'wait_finish',
        ClockDelayState(2.),
        transitions={'valid': 'wait_finish',
                     'invalid': 'delete_target',
                     'preempted': PREEMPTED}
    )
    StateMachine.add('delete_target', 
                     CBState(delete_cb("target")), 
                     transitions={'finished': 'delete_ball',
                                 'preempted': PREEMPTED}
    )
        
    StateMachine.add('delete_ball', 
                     CBState(delete_cb("ball")), 
                     transitions={'finished': 'reset_arm_final',
                                 'preempted': PREEMPTED}
    )
    
    StateMachine.add(
      'reset_arm_final',
      CBState(reset_cb()),
      transitions={'finished': 'wait_delete',
                     'preempted': PREEMPTED}
    )
    
    StateMachine.add(
        'wait_delete',
        ClockDelayState(5.),
        transitions={'valid': 'wait_delete',
                     'invalid': 'reset_arm',
                     'preempted': PREEMPTED}
    )